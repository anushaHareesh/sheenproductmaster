import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:sql_conn/sql_conn.dart';

class TestPage extends StatefulWidget {
  const TestPage({Key? key}) : super(key: key);

  @override
  _TestPageState createState() => _TestPageState();
}

class _TestPageState extends State<TestPage> {
  Future<void> connect(BuildContext ctx) async {
    debugPrint("Connecting...");
    try {
      showDialog(
        context: context,
        builder: (context) {
          return const AlertDialog(
            title: Text("LOADING"),
            content: CircularProgressIndicator(),
          );
        },
      );
      await SqlConn.connect(
          ip: "103.177.225.245",
          port: "54321",
          databaseName: "SBK69715",
          username: "sa",
          password: "##v0e3g9a#");
      debugPrint("Connected!");
    } catch (e) {
      debugPrint(e.toString());
    } finally {
      Navigator.pop(context);
    }
  }

  Future<void> read(String query) async {
    List<Autogenerated> list = [];
    var res = await SqlConn.readData(query);
    // var encodedString = jsonEncode(res);

    // var valueMap = jsonDecode(encodedString);
    List valueMap = json.decode(res);
    print(
        "valuemap-$valueMap-${valueMap.runtimeType}---------${res.runtimeType}");
    Autogenerated user;
    var map2 = json.decode(res);
    // for (var item in valueMap) {
    //   user = Autogenerated.fromJson(item);
    //   list.add(user);
    // }
    print("lngth---${map2}");
    debugPrint(res.toString());
  }

  Future<void> write(String query) async {
    var res = await SqlConn.writeData(query);
    debugPrint(res.toString());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text('Plugin example app'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ElevatedButton(
                  onPressed: () => connect(context),
                  child: const Text("Connect")),
              // ElevatedButton(
              //     onPressed: () =>
              //         read("Sp_Purch_Summary '11-Aug-2023','11-Aug-2023',1,''"),
              //     child: const Text("Read")),
              // ElevatedButton(
              //     onPressed: () => write("DELETE FROM IP_List WHERE LOC='vv1'"),
              //     child: const Text("Write")),
              ElevatedButton(
                  onPressed: () => read(
                      "SELECT fld0401 AS catId,fld0402 as catName FROM TAB04 ORDER BY FLD0402"),
                  child: const Text("select cat")),
              ElevatedButton(
                  onPressed: () => read(
                      "SELECT fld8801 AS unitId,fld8802 as unitName FROM TAB88 ORDER BY fld8802"),
                  child: const Text("select unit")),
              ElevatedButton(
                  onPressed: () => read(
                      "SELECT fld1301 AS taxId,fld1302 as taxType FROM TAB13 ORDER BY fld1301"),
                  child: const Text("select tax")),
              // ElevatedButton(
              //     onPressed: () => write("DROP TABLE Persons"),
              //     child: const Text("Delete Table")),
              ElevatedButton(
                  onPressed: () => SqlConn.disconnect(),
                  child: const Text("Disconnect"))
            ],
          ),
        ));
  }
}

class Autogenerated {
  String? purchCode;
  int? purchID;
  String? purchDt;
  String? purchBillNo;
  String? purchBillDt;
  String? billMode;
  String? accName;
  String? accGSTIN;
  double? taxable;
  double? cGST;
  double? sGST;
  double? iGST;
  double? addnl;
  double? disc;
  double? tcs;
  double? rnding;
  double? purchGrandTotal;
  String? userName;
  String? location;

  Autogenerated(
      {this.purchCode,
      this.purchID,
      this.purchDt,
      this.purchBillNo,
      this.purchBillDt,
      this.billMode,
      this.accName,
      this.accGSTIN,
      this.taxable,
      this.cGST,
      this.sGST,
      this.iGST,
      this.addnl,
      this.disc,
      this.tcs,
      this.rnding,
      this.purchGrandTotal,
      this.userName,
      this.location});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    purchCode = json['Purch_Code'];
    purchID = json['Purch_ID'];
    purchDt = json['Purch_Dt'];
    purchBillNo = json['Purch_BillNo'].toString();
    purchBillDt = json['Purch_BillDt'];
    billMode = json['BillMode'];
    accName = json['Acc_Name'];
    accGSTIN = json['Acc_GSTIN'];
    taxable = json['Taxable'];
    cGST = json['CGST'].toDouble();
    sGST = json['SGST'].toDouble();
    iGST = json['IGST'].toDouble();
    addnl = json['Addnl'].toDouble();
    disc = json['Disc'].toDouble();
    tcs = json['Tcs'].toDouble();
    rnding = json['Rnding'].toDouble();
    purchGrandTotal = json['Purch_GrandTotal'].toDouble();
    userName = json['UserName'];
    location = json['Location'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Purch_Code'] = this.purchCode;
    data['Purch_ID'] = this.purchID;
    data['Purch_Dt'] = this.purchDt;
    data['Purch_BillNo'] = this.purchBillNo;
    data['Purch_BillDt'] = this.purchBillDt;
    data['BillMode'] = this.billMode;
    data['Acc_Name'] = this.accName;
    data['Acc_GSTIN'] = this.accGSTIN;
    data['Taxable'] = this.taxable;
    data['CGST'] = this.cGST;
    data['SGST'] = this.sGST;
    data['IGST'] = this.iGST;
    data['Addnl'] = this.addnl;
    data['Disc'] = this.disc;
    data['Tcs'] = this.tcs;
    data['Rnding'] = this.rnding;
    data['Purch_GrandTotal'] = this.purchGrandTotal;
    data['UserName'] = this.userName;
    data['Location'] = this.location;
    return data;
  }
}
